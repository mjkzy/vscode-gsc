{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "GSC",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#define"
		},
		{
			"include": "#ifdef"
		},
		{
			"include": "#endif"
		},
		{
			"include2": "#include"
		},
		{
			"include2": "#inline"
		},
		{
			"include2": "#using_animtree"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#functions"
		},
		{
			"include": "#variables"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"begin": "/\\*",
					"end": "\\*/",
					"name": "comment.block.gsc"
				},
				{
					"begin": "//",
					"end": "\\n",
					"name": "comment.line.double-slash.gsc"
				},
				{
					"begin": "/#",
					"end": "#/",
					"name": "comment.block.developerscript.gsc"
				},
				{
					"begin": "/@",
					"end": "@/",
					"name": "comment.block.annotation.gsc"
				}
			]
		},
		"define": {
			"comment": "Example: #define MACRO_NAME <value>",
			"name": "meta.preprocessor.define.gsc",
			"begin": "(#define)\\s+([A-Za-z_][A-Za-z_0-9]*)",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.directive.define.gsc"
				},
				"2": {
					"name": "constant.language.c"
				}
			},
			"end": "$"
		},
		"ifdef": {
			"comment": "Example: #ifdef MACRO_NAME",
			"name": "meta.preprocessor.ifdef.gsc",
			"begin": "(#ifdef)\\s+([A-Za-z_][A-Za-z_0-9]*)",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.directive.ifdef.gsc"
				},
				"2": {
					"name": "constant.language.c"
				}
			},
			"end": "$"
		},
		"endif": {
			"comment": "Example: #endif MACRO_NAME",
			"name": "meta.preprocessor.endif.gsc",
			"begin": "(#endif)\\s+([A-Za-z_][A-Za-z_0-9]*)",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.directive.endif.gsc"
				},
				"2": {
					"name": "constant.language.c"
				}
			},
			"end": "$"
		},
		"include": {
			"comment": "Example: #include maps\\mp\\gametypes",
			"name": "meta.preprocessor.include.gsc",
			"begin": "(#include)",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.directive.include.gsc"
				}
			},
			"end": ";",
			"patterns": [
				{
					"name": "entity.name.class.gsc",
					"match": "[A-Za-z_][A-Za-z_0-9]*(\\\\[A-Za-z_][A-Za-z_0-9]*)*"
				}
			]
		},
		"inline": {
			"comment": "Example: #inline maps\\mp\\gametypes",
			"name": "meta.preprocessor.inline.gsc",
			"begin": "(#inline)",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.directive.inline.gsc"
				}
			},
			"end": ";",
			"patterns": [
				{
					"name": "entity.name.class.gsc",
					"match": "[A-Za-z_][A-Za-z_0-9]*(\\\\[A-Za-z_][A-Za-z_0-9]*)*"
				}
			]
		},
		"using_animtree": {
			"comment": "Example: #using_animtree(\"drones\");",
			"name": "meta.preprocessor.include.gsc",
			"begin": "(#using_animtree)",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.directive.include.gsc"
				}
			},
			"end": ";",
			"patterns": [
				{
					"include": "#strings"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.gsc",
					"match": "\\b(break(point)?|case|continue|default|else|for|foreach|if|return|switch|thread|waittill|waittillmatch|waittillframeend|while|do|wait|endon|notify)\\b"
				},
				{
					"name": "variable.language",
					"match": "\\b(game|level|self)\\b"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"name": "constant.language.gsc",
					"match": "\\b(true|false|undefined)\\b"
				},
				{
					"name": "storage.type.built-in.primitive.gsc",
					"match": "\\b(int|float|bool|string)\\b"
				},
				{
					"name": "constant.numeric.gsc",
					"match": "(?:\\b|\\s)(?:(?:[1-9][0-9]*|0)?\\.[0-9]+|[1-9][0-9]*|0)\\b"
				},
				{
					"name": "keyword.other",
					"match": "%[A-Za-z_][A-Za-z_0-9]*"
				},
				{
					"comment": "Localized string: &\"STRING_EXAMPLE\" ",
					"match": "(&)(?=\"[^\"]*\")",
					"captures": {
						"1": {
							"name": "keyword.control.directive.include.gsc"
						}
					}
				},
				{
					"include": "#strings"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.gsc",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"comment": "Highlight escaped chars",
					"name": "constant.character.escape.gsc",
					"match": "\\\\."
				},
				{
					"comment": "Highlight &&1 &&2 &&3 keywords in string",
					"name": "constant.character.escape.gsc",
					"match": "&&[1-9]"
				}
			]
		},
		"functions": {
			"patterns": [
				{
					"comment": "Function call: functionCall(",
					"match": "\\b([A-Za-z_][A-Za-z_0-9]*)\\b(?=\\s*\\()",
					"captures": {
						"1": {
							"name": "entity.name.function.gsc"
						}
					}
				}
			]
		},
		"variables": {
			"patterns": [
				{
					"name": "variable.other.gsc",
					"match": "\\b[A-Za-z_][A-Za-z0-9_]*\\b"
				}
			]
		}
	},
	"scopeName": "source.gsc"
}